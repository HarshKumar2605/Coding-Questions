/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int n=preorder.size();
        stack<TreeNode*> st;
        TreeNode* root=NULL;
        TreeNode* p=NULL;
        TreeNode* temp=NULL;
        
         int i=0;
        
         temp=new TreeNode(preorder[i]);
            root=temp;
            p=root;
            i++;
        
       
        while(i<n){
            
           
            
      
            if(preorder[i]<p->val){
               
                temp=new TreeNode(preorder[i]);
                p->left=temp;
                st.push(p);
                p=temp;
                i++;
            }
            
            else if(preorder[i]>p->val and((st.empty()) or preorder[i]<st.top()->val))
             {
                temp=new TreeNode(preorder[i]);
                p->right=temp;
                p=temp;
                i++;
                
            }
               
        
            
            else{
                p=st.top();
                st.pop();
            }
          
        
    }
        return root;
    }
};
